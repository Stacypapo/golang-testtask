// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "golangTestTask/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// BaseWallets mocks base method.
func (m *MockWallet) BaseWallets(count int, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseWallets", count, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// BaseWallets indicates an expected call of BaseWallets.
func (mr *MockWalletMockRecorder) BaseWallets(count, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseWallets", reflect.TypeOf((*MockWallet)(nil).BaseWallets), count, balance)
}

// CreateRandomWallets mocks base method.
func (m *MockWallet) CreateRandomWallets(count int, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRandomWallets", count, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRandomWallets indicates an expected call of CreateRandomWallets.
func (mr *MockWalletMockRecorder) CreateRandomWallets(count, balance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRandomWallets", reflect.TypeOf((*MockWallet)(nil).CreateRandomWallets), count, balance)
}

// CreateWallet mocks base method.
func (m *MockWallet) CreateWallet(arg0 models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletMockRecorder) CreateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWallet)(nil).CreateWallet), arg0)
}

// GetAllWallets mocks base method.
func (m *MockWallet) GetAllWallets() ([]models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWallets")
	ret0, _ := ret[0].([]models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWallets indicates an expected call of GetAllWallets.
func (mr *MockWalletMockRecorder) GetAllWallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWallets", reflect.TypeOf((*MockWallet)(nil).GetAllWallets))
}

// GetWalletBalance mocks base method.
func (m *MockWallet) GetWalletBalance(address string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", address)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletMockRecorder) GetWalletBalance(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWallet)(nil).GetWalletBalance), address)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// GetLastTransactions mocks base method.
func (m *MockTransaction) GetLastTransactions(count int) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTransactions", count)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTransactions indicates an expected call of GetLastTransactions.
func (mr *MockTransactionMockRecorder) GetLastTransactions(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTransactions", reflect.TypeOf((*MockTransaction)(nil).GetLastTransactions), count)
}

// TransferFunds mocks base method.
func (m *MockTransaction) TransferFunds(from, to string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferFunds", from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferFunds indicates an expected call of TransferFunds.
func (mr *MockTransactionMockRecorder) TransferFunds(from, to, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFunds", reflect.TypeOf((*MockTransaction)(nil).TransferFunds), from, to, amount)
}
