// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "golangTestTask/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
	isgomock struct{}
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWallet) Create(wallet *models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWalletMockRecorder) Create(wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWallet)(nil).Create), wallet)
}

// Existence mocks base method.
func (m *MockWallet) Existence() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Existence")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Existence indicates an expected call of Existence.
func (mr *MockWalletMockRecorder) Existence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Existence", reflect.TypeOf((*MockWallet)(nil).Existence))
}

// Get mocks base method.
func (m *MockWallet) Get(address string) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", address)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWalletMockRecorder) Get(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWallet)(nil).Get), address)
}

// Update mocks base method.
func (m *MockWallet) Update(wallet *models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWalletMockRecorder) Update(wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWallet)(nil).Update), wallet)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransaction) Create(transaction models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionMockRecorder) Create(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransaction)(nil).Create), transaction)
}

// Getlast mocks base method.
func (m *MockTransaction) Getlast(count int) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getlast", count)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getlast indicates an expected call of Getlast.
func (mr *MockTransactionMockRecorder) Getlast(count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getlast", reflect.TypeOf((*MockTransaction)(nil).Getlast), count)
}
